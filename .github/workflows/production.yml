name: Build and Push Docker Image

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the `main` branch

jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write  # Required to push to GitHub Container Registry
      id-token: write  # Required for OIDC authentication

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/quiz-app:latest .

      # Step 4: Push the Docker image to GitHub Container Registry
      - name: Push Docker Image
        run: |
          docker push ghcr.io/${{ github.repository }}/quiz-app:latest
  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image

    steps:
      # Checkout the code repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      # Set up
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0  # Use your preferred version    
          terraform_wrapper: false

      # Deploy Infrastructure with Terraform
      - name: Terraform Apply
        id: terraform
        run: |
          cd terraform
          terraform init
          terraform apply -var "environment=production" -auto-approve
          output=$(terraform output ec2_instance_public_ip)
          echo $output

      # Health Check Step
      - name: Wait for Application to Become Available
        id: healthcheck
        run: |
          echo "EC2 Public IP is '${{ steps.terraform.outputs.ec2_instance_public_ip }}'"
        # run: |
        #   echo "Waiting for application to become available..."
        #   TIMEOUT=0
        #   while ! curl -s http://${{ steps.terraform.outputs.ec2_instance_public_ip }}:3000 > /dev/null; do
        #     echo "App is not ready yet. Retrying in 10 seconds..."
        #     sleep 10
        #     TIMEOUT=$((TIMEOUT + 10))
        #     if [ "$TIMEOUT" -ge 120 ]; then
        #       echo "App failed to start within the timeout period."
        #       exit 1
        #     fi
        #   done
        #   echo "App is ready and accessible at http://${{ steps.terraform.outputs.ec2_instance_public_ip }}:3000"
